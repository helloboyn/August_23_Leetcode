class Solution {
public:
  int maxDistance(vector<vector<int>>& grid) {
    const int n = grid.size();
    const int m = grid[0].size();
    int ans = -1;
    queue<int> q; // y*100 + x
    for (int i = 0; i < n; ++i)
      for (int j = 0; j < m; ++j)
        if (grid[i][j] == 1) q.push(i * 100 + j);
    vector<int> dirs{0, -1, 0, 1, 0};
    int steps = 0;
    while (q.size()) {
      int size = q.size();
      while (size--) {
        auto p = q.front(); q.pop();
        int x = p % 100;
        int y = p / 100;
        if (grid[y][x] == 2)
          ans = max(ans, steps);
        for (int i = 0; i < 4; ++i) {
          int tx = x + dirs[i];
          int ty = y + dirs[i + 1];
          if (tx < 0 || tx >= m || ty < 0 || ty >= n || grid[ty][tx] != 0) continue;
          grid[ty][tx] = 2;
          q.push(ty * 100 + tx);
        }
      }
      ++steps;
    }
    return ans;
  }
};
/*
int main() {
    vector<vector<int>> g1 = {{1, 0, 1}, {0, 0, 0}, {1, 0, 1}};
    cout << Solution().maxDistance(g1) << endl;
    // 2
    vector<vector<int>> g2 = {{1, 0, 0}, {0, 0, 0}, {0, 0, 0}};
    cout << Solution().maxDistance(g2) << endl;
    //4
    return 0;
}*/
